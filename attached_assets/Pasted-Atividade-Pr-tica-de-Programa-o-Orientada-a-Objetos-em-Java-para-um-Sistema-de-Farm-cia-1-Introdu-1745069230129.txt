Atividade Prática de Programação Orientada a Objetos em Java para um Sistema de Farmácia
1. Introdução à Atividade Prática do Sistema de Farmácia
A aprendizagem de programação, particularmente no paradigma da Orientação a Objetos (OO), é significativamente reforçada através da aplicação prática dos conceitos teóricos. Exercícios que simulam cenários do mundo real proporcionam aos estudantes a oportunidade de consolidar o conhecimento adquirido e desenvolver habilidades de resolução de problemas. Nesse contexto, o desenvolvimento de um sistema de gestão para uma farmácia apresenta-se como uma atividade prática pertinente e envolvente, permitindo a exploração de diversos princípios da programação OO em Java. Esta atividade visa cobrir temas fundamentais e avançados da OO, incluindo a criação de classes e objetos, a implementação de herança e polimorfismo, o agrupamento de objetos através de coleções, o tratamento de exceções e a utilização de um ambiente de desenvolvimento Java.
Ao completar esta atividade, espera-se que os alunos sejam capazes de alcançar os seguintes objetivos de aprendizagem:
● Conceber e implementar classes Java que representam entidades do mundo real, como medicamentos, funcionários e clientes.
● Utilizar o princípio da herança para modelar as relações hierárquicas entre diferentes tipos de funcionários, como caixas e gerentes.
● Aplicar o conceito de polimorfismo para implementar comportamentos variados com base no tipo de objeto, como diferentes formas de aplicar descontos.
● Empregar coleções Java para gerir e manipular dados, como o inventário de medicamentos.
● Implementar mecanismos de tratamento de exceções para criar código robusto e capaz de lidar com situações inesperadas, como a falta de estoque.
● Configurar e utilizar um ambiente de desenvolvimento Java para escrever, compilar e executar o sistema.
A atividade proposta procura estabelecer uma ligação entre a teoria da programação OO e a sua aplicação prática no desenvolvimento de software. Ao centrarem-se no domínio familiar de uma farmácia, os estudantes poderão compreender melhor a relevância e a utilidade destes conceitos na construção de sistemas de informação.1
2. Requisitos e Especificações do Sistema
O sistema de gestão de farmácia a ser desenvolvido tem como objetivo principal
otimizar as operações diárias de uma farmácia, abrangendo a gestão de inventário, vendas, funcionários e clientes.
● Visão Geral do Sistema de Farmácia: O sistema deve permitir o controle eficiente do estoque de medicamentos, o registo de clientes, a gestão de funcionários com diferentes níveis de acesso e permissões, o processamento de vendas e a aplicação de descontos sob certas condições.
● Funções e Funcionalidades dos Utilizadores: O sistema deverá suportar diferentes tipos de utilizadores, cada um com funcionalidades específicas:
○ Caixa: Este utilizador deverá ser capaz de processar transações de venda, interagir com o inventário para verificar a disponibilidade de medicamentos e registar as vendas efetuadas. Adicionalmente, deverá ser responsável pela emissão de recibos correspondentes a cada transação.
○ Gerente: Para além das funcionalidades de um caixa, o gerente terá a capacidade de conceder descontos nas vendas, seguindo uma lógica específica a ser definida. Outras tarefas administrativas poderão ser consideradas numa fase mais avançada do exercício, mas não são essenciais para a versão básica.16 A distinção entre caixas e gerentes pode ser modelada através da herança, onde a classe Gerente herda as propriedades e métodos da classe Caixa e adiciona a funcionalidade de aplicar descontos.
○ Cliente: Os clientes poderão ser registrados no sistema, fornecendo informações como o número de CPF. Clientes registados poderão ser elegíveis para descontos especiais baseados no seu registo. O sistema poderá, opcionalmente, manter um histórico de compras para cada cliente.
● Gestão de Inventário: O sistema deverá manter um registo detalhado dos medicamentos disponíveis, incluindo o nome, a quantidade, o preço e a data de validade. Deverá existir um mecanismo para registar a entrada de novos medicamentos no estoque e para diminuir a quantidade de medicamentos após cada venda. Para simular a base de dados, deverão ser utilizadas coleções Java, como ArrayList ou HashMap, sendo esta última particularmente útil para pesquisar medicamentos através de um identificador único, como o nome ou um código.
● Transação de Venda: O processo de venda deverá permitir a seleção de um ou mais medicamentos do inventário. O sistema deverá calcular o valor total da venda, aplicar quaisquer descontos elegíveis e processar o pagamento do valor total através da interação com o caixa. Após a conclusão da venda, o sistema deverá atualizar automaticamente os níveis de estoque dos medicamentos vendidos.
● Regras de Desconto: Deverão ser implementadas duas formas de desconto: um
desconto discricionário que pode ser aplicado por um gerente (por exemplo, uma percentagem sobre o valor total da venda) e um desconto fixo para clientes registados no sistema que possuam um CPF válido (por exemplo, uma porcentagem predefinida).
● ]Tratamento de Exceções: O sistema deverá ser capaz de lidar com diversas situações de erro através do tratamento de exceções em Java. Isto inclui cenários como a tentativa de vender um medicamento quando não há estoque suficiente, a introdução de dados inválidos por parte do utilizador (por exemplo, um CPF com formato incorreto) e a tentativa de um funcionário que não seja gerente de aplicar um desconto.
3. Aplicação de Conceitos de Programação Orientada a Objetos em Java
● 3.1. Classes e Objetos: A base para o desenvolvimento do sistema de farmácia reside na identificação e modelação das entidades chave através de classes Java. Cada classe servirá como um modelo para criar objetos que representam instâncias específicas dessas entidades no sistema.
○ Identificação de Entidades Centrais: No contexto de um sistema de farmácia, algumas das entidades centrais que podem ser modeladas como classes incluem:
■ Medicamento: Esta classe representará cada medicamento disponível na farmácia e deverá conter atributos como o nome, a dosagem (opcional), o preço unitário, a quantidade em estoque, a data de validade e um identificador único, como um código de barras.
■ Sobrescrita do Método toString():
■ Sobrescreva o método toString() na classe Medicamento.
■ Implemente este método para retornar uma representação textual útil de um objeto Medicamento, incluindo os seus atributos chave (por exemplo, "Medicamento: Nome=Paracetamol, Preço=10.50, Quantidade=100, ID=12345, Data de Validade=2024-12-31"). A sobrescrita de toString() é fundamental para fins de depuração e registo, fornecendo uma maneira clara de visualizar o estado de um objeto.
■ Funcionário: Esta será uma classe base para todos os funcionários da farmácia, contendo atributos comuns como o ID do funcionário e o nome.
■ Caixa: Esta classe herdará da classe Funcionário e representará os funcionários que trabalham na caixa, responsáveis por processar as vendas.
■ Gerente: Esta classe também herdará da classe Funcionário (ou possivelmente de Caixa) e terá a funcionalidade adicional de poder conceder descontos.
■ Cliente: Esta classe representará os clientes da farmácia e deverá conter atributos como o ID do cliente, o nome e o número de CPF.
■ Venda: Esta classe representará uma transação de venda específica e deverá conter informações como o ID da venda, uma lista dos medicamentos vendidos, o valor total, a data e hora da venda, o funcionário que processou a venda e o cliente (se aplicável).
○ Design de Atributos e Métodos das Classes: Para cada classe identificada, é necessário definir os atributos (os dados que a classe irá armazenar) e os métodos (as ações ou comportamentos que a classe poderá realizar).
■ Exemplo para a classe Medicamento: Atributos como nome (String), quantidade (int), preco (double), dataValidade (Date) e id (String). Métodos como getNome(), getQuantidade(), getPreco(), getDataValidade(), getId(), e possivelmente métodos para diminuir a quantidade após uma venda ou para verificar se o medicamento está expirado.
■ Exemplo para a classe Funcionário: Atributos como funcionarioId (int) e nome (String). Métodos como getFuncionarioId() e getNome().
■ Exemplo para a classe Caixa: Herdará os atributos e métodos de Funcionário. Poderá ter um método para processarPagamento(double valor).
■ Exemplo para a classe Gerente: Herdará de Caixa e terá um método adicional como aplicarDesconto(Venda venda, double percentagem).
■ Exemplo para a classe Cliente: Atributos como clienteId (int), nome (String) e cpf (String). Métodos como getClienteId(), getNome() e getCpf().
■ Exemplo para a classe Venda: Atributos como vendaId (int), itensVendidos (List de Medicamento), valorTotal (double), dataHora (LocalDateTime) e funcionario (Funcionário), cliente (Cliente). Métodos para adicionarItem(Medicamento medicamento), calcularTotal(), aplicarDesconto(double percentagem) e getValorTotal().
● 3.2. Implementação de Herança e Polimorfismo: A herança e o polimorfismo são conceitos chave da programação OO que permitem criar sistemas flexíveis e reutilizáveis.
○ Modelagem da Hierarquia de Funcionários com Herança: A relação "é-um" entre Funcionário, Caixa e Gerente é um exemplo clássico onde a herança pode ser aplicada. A classe Caixa "é-um" Funcionário, e a classe Gerente "é-um" Caixa (e, por extensão, também um Funcionário). Isto significa que Caixa herda os atributos e métodos definidos na classe Funcionário, e Gerente herda de Caixa, tendo acesso a todos os atributos e
métodos de Funcionário e Caixa. Além disso, cada subclasse pode adicionar os seus próprios atributos e métodos específicos. Por exemplo, a classe Gerente pode ter um método aplicarDesconto que não existe na classe Caixa.
○ Aplicação de Polimorfismo para Lógica de Desconto: O polimorfismo pode ser utilizado para implementar diferentes regras de desconto dependendo do ator envolvido (gerente ou cliente registado). Uma forma de abordar isto é através da definição de um método aplicarDesconto(Venda venda) numa interface ou numa classe base, que seria então implementado de forma específica nas classes Gerente e Cliente. Por exemplo, o método aplicarDesconto na classe Gerente poderia permitir a introdução de uma percentagem de desconto arbitrária, enquanto na classe Cliente poderia aplicar um desconto predefinido para clientes registados com um CPF válido. Alternativamente, a classe Venda poderia ter um método aplicarDesconto(Object ator, double percentagem) que verificaria o tipo do objeto ator (se é um Gerente ou um Cliente) e aplicaria o desconto de acordo.26 A utilização de polimorfismo permite que o sistema seja mais flexível, facilitando a adição de novas regras de desconto no futuro sem necessidade de modificar o código existente em muitos locais.
● 3.3. Implementação de Agrupamento de Objetos (Coleções): Para gerir o inventário de medicamentos, é essencial utilizar coleções Java que permitam armazenar, pesquisar e manipular os objetos Medicamento.
○ Escolha de Coleções Java Adequadas para o Inventário: Existem várias coleções em Java que podem ser utilizadas, cada uma com as suas próprias características de desempenho. Para o inventário de uma farmácia, algumas opções adequadas incluem:
■ ArrayList: Uma lista dinâmica que pode ser usada para armazenar uma coleção de objetos Medicamento. É eficiente para adicionar e aceder a elementos através do índice, mas a pesquisa por um medicamento específico pode exigir uma iteração pela lista.43
■ HashMap: Uma tabela de hash que armazena pares chave-valor. Pode ser utilizada para armazenar os medicamentos onde a chave poderia ser o nome do medicamento ou o seu ID único (como um código de barras), permitindo uma pesquisa muito rápida de medicamentos específicos.41
■ HashSet: Um conjunto que não permite elementos duplicados. Poderia ser usado se fosse necessário manter um registo único de todos os medicamentos em stock, embora sem uma forma direta de aceder a um medicamento específico sem iteração.
○ Implementação de Operações de Inventário com Coleções: Utilizando a coleção escolhida (por exemplo, um HashMap onde a chave é o nome do medicamento), é possível implementar as funcionalidades de inventário necessárias:
■ Adicionar um novo Medicamento: Criar uma instância da classe Medicamento e adicioná-la à coleção, utilizando o nome do medicamento como chave no caso de um HashMap.
■ Recuperar um Medicamento: Dado o nome do medicamento, pesquisar na coleção e retornar o objeto Medicamento correspondente. No caso de um HashMap, isto seria uma operação eficiente de acesso direto através da chave.
■ Atualizar a quantidade de um Medicamento: Primeiro, recuperar o objeto Medicamento da coleção e, em seguida, modificar o seu atributo de quantidade.
■ Remover um Medicamento: Remover o objeto da coleção, por exemplo, se o medicamento deixar de ser vendido ou se expirar e for descartado.
● 3.4 Implementação de Classes de Desconto:
■ Implemente várias classes concretas que implementem a interface Desconto ou herdem da classe abstrata Desconto. Exemplos incluem:
■ DescontoParaClienteRegistrado (DiscountForRegisteredClient): Aplica um desconto se o cliente estiver registado no sistema (potencialmente verificando um atributo como o CPF).
■ DescontoParaGerente (DiscountForManager): Aplica um desconto específico se a venda for processada por um gerente
■ DescontoPromocional (PromotionalDiscount): Aplica um desconto com base numa promoção específica (por exemplo, compre dois e leve um grátis, percentagem de desconto em certos medicamentos).
■ Cada uma dessas classes deve implementar o método aplicarDesconto() com a sua lógica de desconto específica. Esta etapa demonstra como diferentes classes podem fornecer implementações distintas para o mesmo método.
● Aplicação de Descontos:
■ Crie uma instância de um objeto Venda (Sale), que deve incluir uma lista de objetos Medicamento e um objeto Cliente (Customer).
■ Crie instâncias dos diferentes tipos de desconto implementados (DescontoParaClienteRegistrado, DescontoParaGerente, DescontoPromocional).
■ Demonstrar como cada objeto de desconto pode ser aplicado ao mesmo objeto Venda chamando o método aplicarDesconto(), resultando em valores totais potencialmente diferentes para a venda.
■ Mostrar como uma List ou outra coleção de objetos Desconto pode ser iterada, aplicando cada desconto à venda.